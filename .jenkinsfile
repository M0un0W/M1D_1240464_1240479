pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        MAVEN_CMD = './mvnw'
    }

    stages {
        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm  // Uses the default SCM configuration in Jenkins
            }
        }

        stage('Clean') {
            steps {
                echo 'Cleaning the workspace...'
                sh 'chmod +x ${MAVEN_CMD}'   // Set executable permissions
                sh '${MAVEN_CMD} clean'      // Clean the project
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                script {
                    try {
                        sh '${MAVEN_CMD} test'  // Run unit tests with Maven
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'UNSTABLE'
                        echo 'Unit tests failed, marking as UNSTABLE...'
                    }
                }
            }
        }

        stage('Mutation Tests') {
            steps {
                echo 'Running mutation tests...'
                sh '${MAVEN_CMD} org.pitest:pitest-maven:mutationCoverage'  // Run mutation tests
            }
        }

        stage('Integration Tests') {
            when {
                expression { currentBuild.result == 'UNSTABLE' }  // Runs only if Unit Tests are UNSTABLE
            }
            steps {
                echo 'Running integration tests due to unit test failure...'
                sh '${MAVEN_CMD} verify'  // Runs integration tests using the Failsafe plugin
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
                // Add deployment steps here, like SSH or Kubernetes commands
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        unstable {
            echo 'Pipeline completed with issues in unit tests, integration tests were executed as a fallback.'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
