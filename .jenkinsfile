pipeline {
    agent any

    triggers {
        githubPush()
    }

    stages {
        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm // Uses the default SCM configuration in Jenkins
            }
        }

        stage('Clean') {
            steps {
                echo 'Cleaning the workspace...'
                script {
                    if (isUnix()) {
                        sh 'chmod +x ./mvnw' // Set executable permissions for Unix
                        sh './mvnw clean'    // Run clean for Unix
                    } else {
                        echo 'Skipping permission change on Windows'
                        bat 'mvnw clean'     // Run clean for Windows
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                script {
                    try {
                        if (isUnix()) {
                            sh './mvnw test' // Run unit tests using Surefire on Unix
                        } else {
                            bat 'mvnw test'  // Run unit tests using Surefire on Windows
                        }
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'UNSTABLE'
                        echo 'Unit tests failed, marking build as UNSTABLE...'
                    }
                }
            }
        }

        stage('Integration Tests') {
            when {
                expression { currentBuild.result == 'SUCCESS' } // Runs if Unit Tests succeed
            }
            steps {
                echo 'Running integration tests...'
                script {
                    if (isUnix()) {
                        sh './mvnw verify' // Run integration tests using Failsafe on Unix
                    } else {
                        bat 'mvnw verify'  // Run integration tests using Failsafe on Windows
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                expression { currentBuild.result == 'SUCCESS' } // Deploys only if all tests pass
            }
            steps {
                echo 'Deploying the application...'
                // Add your deployment steps here
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        unstable {
            echo 'Pipeline completed with issues in unit tests, integration tests were executed as a fallback.'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up resources...'
            cleanWs() // Optional: Cleans up the workspace after the build
        }
    }
}
